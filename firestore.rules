rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.role == 'admin' || 
         request.auth.email == 'ruud@kontena.eu');  // Added Ruud explicitly
    }
    
    function canEdit() {
      return isAuthenticated() && 
        (request.auth.token.role == 'editor' || 
         request.auth.token.role == 'admin' ||
         request.auth.email == 'ruud@kontena.eu');  // Added Ruud explicitly
    }

    function hasValidTimestamps() {
      return request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp;
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    match /modules/{moduleId} {
      allow read: if isAuthenticated();
      allow create, update: if canEdit();
      allow delete: if isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if canEdit();
    }

    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if canEdit();
      allow update, delete: if canEdit() && 
        (resource.data.ownerId == request.auth.uid || isAdmin());

      function isValidProject() {
        let data = request.resource.data;
        return data.name is string && data.name.size() > 0 &&
               data.ownerId is string &&
               data.description is string &&
               (!('clientInfo' in data) || (data.clientInfo is map)) &&
               hasValidTimestamps() &&
               (!('layouts' in data) || data.layouts is list);
      }
    }
  }
}